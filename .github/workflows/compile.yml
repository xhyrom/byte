name: Compile
on:
  workflow_dispatch:
  push:

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install rust
        uses: ./.github/actions/install-rust

      - name: check
        uses: ./.github/actions/check

  compile:
    name: compile ${{ matrix.target }}
    runs-on: ${{ matrix.runner  }}
    needs: check
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            archive: tar.gz
            bootstrap: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config
            binary: cargo
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
            archive: tar.gz
            bootstrap: |
              sudo apt-get update
              sudo apt-get -y install podman
              cargo install cross
              cargo clean
            binary: cross

          - target: x86_64-apple-darwin
            runner: macos-latest
            archive: tar.gz
            bootstrap: |
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              arch -x86_64 /usr/local/bin/brew install openssl@3
              echo "OPENSSL_DIR=$(/usr/local/bin/brew --prefix openssl@3)" >> $GITHUB_ENV
            binary: cargo
          - target: aarch64-apple-darwin
            runner: macos-latest
            archive: tar.gz
            bootstrap: echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
            binary: cargo

          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            archive: zip
            binary: cargo
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install rust
        uses: ./.github/actions/install-rust
        with:
          targets: "${{ matrix.target }}"

      - name: bootstrap
        if: ${{ matrix.bootstrap != '' }}
        run: ${{ matrix.bootstrap }}

      - name: build binary
        run: ${{ matrix.binary }} build --verbose --locked --release --target ${{ matrix.target }}

      - name: prepare for upload
        shell: bash
        id: vars
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          BIN_OUTPUT="target/${{ matrix.target }}/release/byte${BIN_SUFFIX}"
          ARCHIVE_NAME="byte-${{ matrix.target }}"

          mkdir tmp/
          mkdir "tmp/${ARCHIVE_NAME}"

          mv "${BIN_OUTPUT}" "tmp/${ARCHIVE_NAME}"
          cp LICENSE "tmp/${ARCHIVE_NAME}"
          cp lsp/README.md "tmp/${ARCHIVE_NAME}"

          if [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            ARCHIVE_PATH="tmp/${ARCHIVE_NAME}.tar.gz"
            tar -czvf "${ARCHIVE_PATH}" -C "tmp" "${ARCHIVE_NAME}"
          else
            ARCHIVE_PATH="tmp/${ARCHIVE_NAME}.zip"

            cd tmp
            if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
              7z a "../${ARCHIVE_PATH}" "${ARCHIVE_NAME}"
            else
              zip -r "../${ARCHIVE_PATH}" "/${ARCHIVE_NAME}"
            fi

            cd ..
          fi

          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "archive_path=${ARCHIVE_PATH}" >> $GITHUB_OUTPUT

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.archive_name }}
          path: |
            ${{ steps.vars.outputs.archive_path }}
